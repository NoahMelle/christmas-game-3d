/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import {
    RigidBody,
    CuboidCollider,
    CollisionPayload,
} from "@react-three/rapier";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
    nodes: {
        Cylinder: THREE.Mesh;
        Sphere: THREE.Mesh;
        Sphere001: THREE.Mesh;
        Sphere002: THREE.Mesh;
        Sphere003: THREE.Mesh;
        Plane001: THREE.Mesh;
    };
    materials: {
        ["Material.004"]: THREE.MeshStandardMaterial;
        ["Material.002"]: THREE.MeshStandardMaterial;
    };
};

export function Goal({
    setScore,
    player,
    position,
    rotation,
}: Readonly<{
    setScore: React.Dispatch<React.SetStateAction<{ p1: number; p2: number }>>;
    position?: [number, number, number];
    rotation?: [number, number, number];
    player: "p1" | "p2";
}>) {
    const { nodes, materials } = useGLTF("/goal.glb") as GLTFResult;

    const handleIntersectionEnter = (e: CollisionPayload) => {
        const parent = e.colliderObject?.parent;

        console.log(parent);

        if (!parent) {
            return;
        }

        const userData = parent.userData as { type: string };

        if (userData.type === "puck") {
            console.log("goal!");
            setScore((prev: { p1: number; p2: number }) => ({
                ...prev,
                [player]: prev[player] + 1,
            }));
        }
    };

    return (
        <RigidBody type="fixed" colliders="trimesh" >
            <group dispose={null} position={position} rotation={rotation}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Cylinder.geometry}
                    material={materials["Material.004"]}
                    position={[0, 0.03, -0.328]}
                    rotation={[0.624, 0, 0]}
                    scale={[1, 1.351, 1]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Sphere.geometry}
                    material={materials["Material.004"]}
                    position={[0, 1.114, 1.011]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Sphere001.geometry}
                    material={materials["Material.004"]}
                    position={[0, -0.886, -0.989]}
                    rotation={[-Math.PI / 2, 0, 0]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Sphere002.geometry}
                    material={materials["Material.004"]}
                    position={[0, -0.886, 1.011]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Sphere003.geometry}
                    material={materials["Material.004"]}
                    position={[0, 1.114, 0.451]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Plane001.geometry}
                    material={materials["Material.002"]}
                    position={[0, 0.114, 0.011]}
                    rotation={[0, 0, -Math.PI / 2]}
                />
                <CuboidCollider
                    args={[2, 1, 1]}
                    sensor
                    onIntersectionEnter={handleIntersectionEnter}
                />
            </group>
        </RigidBody>
    );
}

useGLTF.preload("/goal.glb");
