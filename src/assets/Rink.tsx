/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RigidBody } from "@react-three/rapier";
import React from "react";

type GLTFResult = GLTF & {
    nodes: {
        Cube001: THREE.Mesh;
        Cube001_1: THREE.Mesh;
        Cube001_2: THREE.Mesh;
    };
    materials: {
        Material: THREE.MeshStandardMaterial;
        glass: THREE.MeshStandardMaterial;
        ["Material.003"]: THREE.MeshStandardMaterial;
    };
};

export default function Rink({
    lookPosLeft,
    lookPosRight,
    rinkDimensions,
    ...props
}: {
    lookPosLeft: React.MutableRefObject<THREE.Vector3>;
    lookPosRight: React.MutableRefObject<THREE.Vector3>;
    rinkDimensions: React.MutableRefObject<THREE.Vector3>;
}) {
    const { nodes, materials, scene } = useGLTF("/rink.glb") as GLTFResult;

    const box = new THREE.Box3().setFromObject(scene);
    const size = box.getSize(new THREE.Vector3());

    rinkDimensions.current = size;

    lookPosLeft.current = new THREE.Vector3(-size.x / 2, -4, -size.z / 2);
    lookPosRight.current = new THREE.Vector3(-size.x / 2, -4, size.z / 2);

    return (
        <RigidBody
            type="fixed"
            colliders="trimesh"
            friction={0.01}
            linearDamping={0}
            angularDamping={0}
        >
            <group {...props} dispose={null} position={[0, 0, 0]}>
                <group scale={[0.973, 0.694, 0.901]}>
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Cube001.geometry}
                        material={materials.Material}
                    />
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Cube001_1.geometry}
                        material={materials.glass}
                        material-transparent={true}
                        material-opacity={0.1} // Adjust the opacity value as needed
                    />
                    <mesh
                        castShadow
                        receiveShadow
                        geometry={nodes.Cube001_2.geometry}
                        material={materials["Material.003"]}
                    />
                </group>
            </group>
        </RigidBody>
    );
}

useGLTF.preload("/rink.glb");
