/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RigidBody } from "@react-three/rapier";
import React from "react";
import { useControls } from "leva";

type GLTFResult = GLTF & {
    nodes: {
      Cube608: THREE.Mesh
      Cube608_1: THREE.Mesh
      Cube608_2: THREE.Mesh
    }
    materials: {
      ['Material.001']: THREE.MeshStandardMaterial
      ['glass.001']: THREE.MeshStandardMaterial
      ['Material.002']: THREE.MeshStandardMaterial
    }
  }
  
  

export default function Rink({
    lookPosLeft,
    lookPosRight,
    rinkDimensions,
    ...props
}: {
    lookPosLeft: React.MutableRefObject<THREE.Vector3>;
    lookPosRight: React.MutableRefObject<THREE.Vector3>;
    rinkDimensions: React.MutableRefObject<THREE.Vector3>;
}) {
    const { nodes, materials, scene } = useGLTF("/rink.glb") as GLTFResult;

    const glassMaterialProps = useControls({
        thickness: { value: 5, min: 0, max: 20 },
        roughness: { value: 0, min: 0, max: 1, step: 0.1 },
        clearcoat: { value: 1, min: 0, max: 1, step: 0.1 },
        clearcoatRoughness: { value: 0, min: 0, max: 1, step: 0.1 },
        transmission: { value: 1, min: 0.9, max: 1, step: 0.01 },
        ior: { value: 1.25, min: 1, max: 2.3, step: 0.05 },
        envMapIntensity: { value: 25, min: 0, max: 100, step: 1 },
        color: "#000000",
        attenuationTint: "#ffe79e",
        attenuationDistance: { value: 0, min: 0, max: 1 },
    });

    const glassMaterial = new THREE.MeshPhysicalMaterial({
        metalness: 0,
        thickness: glassMaterialProps.thickness,
        roughness: glassMaterialProps.roughness,
        envMapIntensity: glassMaterialProps.envMapIntensity,
        clearcoat: glassMaterialProps.clearcoat,
        transparent: true,
        transmission: glassMaterialProps.transmission,
        // opacity:
        ior: 5,
        side: THREE.BackSide,
    });

    const box = new THREE.Box3().setFromObject(scene);
    const size = box.getSize(new THREE.Vector3());

    rinkDimensions.current = size;

    lookPosLeft.current = new THREE.Vector3(-size.x / 2, -4, -size.z / 2);
    lookPosRight.current = new THREE.Vector3(-size.x / 2, -4, size.z / 2);

    return (
        <RigidBody
            type="fixed"
            colliders="trimesh"
            friction={0.01}
            linearDamping={0}
            angularDamping={0}
        >
            <group {...props} dispose={null}>
                <mesh
                    geometry={nodes.Cube608.geometry}
                    material={materials["Material.001"]}
                />
                <mesh
                    geometry={nodes.Cube608_1.geometry}
                    material={glassMaterial}
                />
                <mesh
                    geometry={nodes.Cube608_2.geometry}
                    material={materials["Material.002"]}
                />
            </group>
        </RigidBody>
    );
}

useGLTF.preload("/rink.glb");
